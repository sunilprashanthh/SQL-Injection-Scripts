SQL injection:

    SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior.

    In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack.

        Example:

            * Retrieving hidden data, where you can modify an SQL query to return additional results.
            * Subverting application logic, where you can change a query to interfere with the application's logic.
            * UNION attacks, where you can retrieve data from different database tables.
            * Examining the database, where you can extract information about the version and structure of the database.
            * Blind SQL injection, where the results of a query you control are not returned in the application's responses.

    UNION attacks:

        * When an application is vulnerable to SQL injection and the results of the query are returned within the application's responses, the UNION keyword can be used to retrieve data from other tables within the database. This results in an SQL injection UNION attack.

        * The UNION keyword lets you execute one or more additional SELECT queries and append the results to the original query. For example:
        
            ex., SELECT a, b FROM table1 UNION SELECT c, d FROM table2

        * This SQL query will return a single result set with two columns, containing values from columns a and b in table1 and columns c and d in table2.

        * For a UNION query to work, two key requirements must be met:

            # The individual queries must return the same number of columns.
            # The data types in each column must be compatible between the individual queries.

        * To carry out an SQL injection UNION attack, you need to ensure that your attack meets these two requirements. This generally involves figuring out:

            # How many columns are being returned from the original query?
            # Which columns returned from the original query are of a suitable data type to hold the results from the injected query?

        * Determining the number of columns required in an SQL injection UNION attack

            # ' ORDER BY 1--
            # ' ORDER BY 2--
            # ' ORDER BY 3-- , etc.

        * Finding columns with a useful data type in an SQL injection UNION attack

            # ' UNION SELECT 'a',NULL,NULL,NULL--
            # ' UNION SELECT NULL,'a',NULL,NULL--
            # ' UNION SELECT NULL,NULL,'a',NULL--
            # ' UNION SELECT NULL,NULL,NULL,'a'--

        * Using an SQL injection UNION attack to retrieve interesting data

            # The original query returns two columns, both of which can hold string data.
            # The injection point is a quoted string within the WHERE clause.
            # The database contains a table called users with the columns username and password.

            Ex,., In this situation, you can retrieve the contents of the users table by submitting the input.

                # ' UNION SELECT username, password FROM users--

    Examining the database in SQL injection attacks

        * When exploiting SQL injection vulnerabilities, it is often necessary to gather some information about the database itself. This includes the type and version of the database software, and the contents of the database in terms of which tables and columns it contains.

            # Microsoft, MySQL ~ SELECT @@version
            # Oracle           ~ SELECT * FROM v$version
            # PostgreSQL       ~ SELECT version() 


    How to detect SQL injection vulnerabilities

        * The majority of SQL injection vulnerabilities can be found quickly and reliably using Burp Suite's web vulnerability scanner.

        * SQL injection can be detected manually by using a systematic set of tests against every entry point in the application. This typically involves:

            # Submitting the single quote character ' and looking for errors or other anomalies.
            # Submitting some SQL-specific syntax that evaluates to the base (original) value of the entry point, and to a different value, and looking for systematic differences in the resulting application responses.
            # Submitting Boolean conditions such as OR 1=1 and OR 1=2, and looking for differences in the application's responses.
            # Submitting payloads designed to trigger time delays when executed within an SQL query, and looking for differences in the time taken to respond.
            # Submitting OAST payloads designed to trigger an out-of-band network interaction when executed within an SQL query, and monitoring for any resulting interactions.

    SQL injection in different parts of the query

        * Most SQL injection vulnerabilities arise within the WHERE clause of a SELECT query. This type of SQL injection is generally well-understood by experienced testers.

        * But SQL injection vulnerabilities can in principle occur at any location within the query, and within different query types. The most common other locations where SQL injection arises are:

            # In UPDATE statements, within the updated values or the WHERE clause.
            # In INSERT statements, within the inserted values.
            # In SELECT statements, within the table or column name.
            # In SELECT statements, within the ORDER BY clause.

    Second-order SQL injection

        * First-order SQL injection arises where the application takes user input from an HTTP request and, in the course of processing that request, incorporates the input into an SQL query in an unsafe way.

        * In second-order SQL injection (also known as stored SQL injection), the application takes user input from an HTTP request and stores it for future use. This is usually done by placing the input into a database, but no vulnerability arises at the point where the data is stored. Later, when handling a different HTTP request, the application retrieves the stored data and incorporates it into an SQL query in an unsafe way. 

    